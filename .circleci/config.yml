version: 2

environment: &environment
  COMPOSE_PROJECT_NAME: exchange-fe
  NODE_ENV: test
  NOTIFY_SLACK_CHANNELS: '#bnr-wmw'

docker_defaults: &docker_defaults
  docker:
    - image: circleci/node:10-browsers
      environment: *environment

machine_defaults: &machine_defaults
  machine:
    docker_layer_caching: true
  environment: *environment

cache_key: &cache_key v1-yarn-{{ .Branch }}-{{ checksum "yarn.lock" }}
cache_keys: &cache_keys
  - *cache_key
  - v1-yarn-{{ .Branch }}-
  - v1-yarn-

cache_paths: &cache_paths
  - node_modules
  - ~/.cache/yarn

yarn_install: &yarn_install
  run:
    name: Install yarn packages
    command: yarn install --non-interactive --cache-folder ~/.cache/yarn

set_deploy_environment: &set_deploy_environment
  run:
    name: Set DEPLOY_ENVIRONMENT based on current branch
    command: |
      export DEPLOY_ENVIRONMENT=${CIRCLE_BRANCH}
      if [ ${DEPLOY_ENVIRONMENT} == 'develop' ]; then export DEPLOY_ENVIRONMENT=acceptance; fi
      echo $DEPLOY_ENVIRONMENT > ~/.deploy_environment
      echo "export DEPLOY_ENVIRONMENT=${DEPLOY_ENVIRONMENT}" >> $BASH_ENV

jobs:
  test:
    <<: *docker_defaults
    steps:
      - checkout
      - restore_cache:
          keys: *cache_keys
      - *yarn_install
      - save_cache:
          key: *cache_key
          paths: *cache_paths
      - run:
          name: Run Tests and Coverage
          command: |
            mkdir reports
            yarn test:serial --bail --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - run:
          name: Codecov
          command: bash <(curl -s https://codecov.io/bash)

  verify:
    <<: *docker_defaults
    steps:
      - checkout
      - restore_cache:
          keys: *cache_keys
      - *yarn_install
      - run: yarn flow check
      - run: yarn lint
      - save_cache:
          key: *cache_key
          paths: *cache_paths
  danger:
    <<: *docker_defaults
    steps:
      - checkout
      - restore_cache:
          keys: *cache_keys
      - *yarn_install
      - save_cache:
          key: *cache_key
          paths: *cache_paths
      - run: '[ ! -z $CI_PULL_REQUESTS ] && yarn danger ci || (echo "Skipping Danger. No PR." && exit 1)'

  build_app:
    <<: *machine_defaults
    steps:
      - checkout
      - run:
          name: Log in to Docker registry
          command: docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY_URL}
      - run:
          name: Build containers
          command: docker-compose build app
      - run:
          name: Tag and push Docker images
          command: |
            docker tag exchangefe_app ${DOCKER_REGISTRY_URL}/exchange-fe/app:${CIRCLE_SHA1}
            docker push ${DOCKER_REGISTRY_URL}/exchange-fe/app:${CIRCLE_SHA1}
  build_storybook:
    <<: *machine_defaults
    steps:
      - checkout
      - run:
          name: Log in to Docker registry
          command: docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD} ${DOCKER_REGISTRY_URL}
      - run:
          name: Build storybook container
          command: docker-compose build storybook
      - run:
          name: Tag and push Docker images
          command: |
            docker tag exchangefe_storybook ${DOCKER_REGISTRY_URL}/exchange-fe/storybook:${CIRCLE_SHA1}
            docker push ${DOCKER_REGISTRY_URL}/exchange-fe/storybook:${CIRCLE_SHA1}

  deploy:
    <<: *docker_defaults
    steps:
      - *set_deploy_environment
      - run:
          name: Download nectar-collector
          command: wget -O nectar-collector-ctl https://provision-weedmaps.s3-us-west-2.amazonaws.com/nectar-collector/latest/linux_amd64/nectar-collector-ctl
      - run:
          name: Change permissions on nectar-collector-ctl
          command: chmod 755 nectar-collector-ctl
      - run:
          name: Deploy release using nectar-collector
          command: ./nectar-collector-ctl release deploy --repo ${CIRCLE_PROJECT_REPONAME} --sha ${CIRCLE_SHA1} --env ${DEPLOY_ENVIRONMENT:-$CIRCLE_BRANCH}

  notify_honeybadger:
    <<: *docker_defaults
    steps:
      - *set_deploy_environment
      - run:
          name: Notify Honeybadger of a deploy
          command: |
            curl -g "https://api.honeybadger.io/v1/deploys?deploy[environment]=$DEPLOY_ENVIRONMENT&deploy[local_username]=$CIRCLE_USERNAME&deploy[revision]=$CIRCLE_SHA1&api_key=$HONEYBADGER_API_KEY_BROWSER&deploy[repository]=https://github.com/GhostGroup/exchange-fe"
            curl -g "https://api.honeybadger.io/v1/deploys?deploy[environment]=$DEPLOY_ENVIRONMENT&deploy[local_username]=$CIRCLE_USERNAME&deploy[revision]=$CIRCLE_SHA1&api_key=$HONEYBADGER_API_KEY_NODE&deploy[repository]=https://github.com/GhostGroup/exchange-fe"
  notify_pre:
    <<: *docker_defaults
    steps:
      - run:
          name: Notify Build Automation API of pre-release
          command: curl -X POST -d "build_number=${CIRCLE_BUILD_NUM}&sha=${CIRCLE_SHA1}&notify=true&pre=true&notify_rooms=${NOTIFY_SLACK_CHANNELS}" https://build-api.internal-weedmaps.com/repos/${CIRCLE_PROJECT_REPONAME}/releases

  notify_prod:
    <<: *docker_defaults
    steps:
      - run:
          name: Notify Build Automation API of production release
          command: curl -X PATCH -d "notify=true&pre=false&notify_rooms=${NOTIFY_SLACK_CHANNELS}" https://build-api.internal-weedmaps.com/repos/${CIRCLE_PROJECT_REPONAME}/releases/${CIRCLE_SHA1}
      - run:
          name: Notify Datadog of production release
          command: curl https://provision-weedmaps.s3-us-west-2.amazonaws.com/testing/bin/report_datadog_event | ENVIRONMENT=production REVISION=${CIRCLE_SHA1} DEPLOYER=CircleCI BUILD_ID=${CIRCLE_SHA1} PROJECT=${CIRCLE_PROJECT_REPONAME} bash
      - run:
          name: Notify Newrelic of production release
          command: |
            curl -XPOST https://api.newrelic.com/v2/applications/$NEW_RELIC_APP_ID/deployments.json -H "X-Api-Key:$NEW_RELIC_API_KEY" -H "Content-Type: application/json" -d "{\"deployment\":{\"revision\":\"$CIRCLE_SHA1\"}}"

exclude_refspec: &exclude_refspec
  filters:
    branches:
      ignore:
        - staging
        - performance
        - production

workflows:
  version: 2
  pipeline:
    jobs:
      - test:
          <<: *exclude_refspec
      - verify:
          <<: *exclude_refspec
      - danger:
          filters:
            branches:
              ignore:
                - develop
                - staging
                - performance
                - production
      - build_app:
          context: weedmaps
          requires:
            - test
            - verify
          filters:
            branches:
              only:
                - develop
      - deploy:
          context: weedmaps-deploy
          requires:
            - build_app
      - build_storybook:
          context: weedmaps
          requires:
            - test
            - verify
          filters:
            branches:
              only:
                - develop
      - notify_honeybadger:
          requires:
            - deploy
  refspec:
    jobs:
      - deploy:
          context: weedmaps-deploy
          filters:
            branches:
              only:
                - staging
                - performance
                - production
      - notify_pre:
          requires:
            - deploy
          filters:
            branches:
              only:
                - staging
      - notify_prod:
          requires:
            - deploy
          filters:
            branches:
              only:
                - production
      - notify_honeybadger:
          requires:
            - deploy
